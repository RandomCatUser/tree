[{"content":"Introduction: The Shift from Conversation to Code The transition from using ChatGPT as a conversational tool to mastering its underlying Large Language Model (LLM) via an API is the next critical step for developers and technical professionals. While the chat interface is ideal for general queries, integrating the LLM API offers granular control, repeatable results, and the ability to build scalable, AI-powered applications.\nThis guide covers advanced Prompt Engineering for the chat interface and the fundamentals of API integration for high-fidelity, production-ready results.\nPart I: Advanced Prompt Engineering for High Fidelity Effective prompting ensures the model\u0026rsquo;s output is reliable, relevant, and consistent—a concept critical for both chat-based research and API calls. We must structure our prompts to reduce ambiguity and \u0026ldquo;hallucination.\u0026rdquo;\nThe R-T-C Framework Use the R-T-C (Role, Task, Constraints) framework for structured, predictable outputs:\nElement Purpose Example Role Defines the AI\u0026rsquo;s persona, expertise, and tone. \u0026ldquo;You are a professional technical writer\u0026hellip;\u0026rdquo; Task The main objective and the required output structure. \u0026ldquo;\u0026hellip;who must summarize the following whitepaper into a three-point executive summary\u0026hellip;\u0026rdquo; Constraints Limits on format, style, and content. Crucial for consistency. \u0026ldquo;\u0026hellip;ensuring the language is strictly formal, and each point is no longer than 150 words.\u0026rdquo; Iterative and Self-Correction Prompts For complex problems, break the task into sequential steps or ask the AI to evaluate its own work:\nChain-of-Thought (CoT): Preface your complex prompt with an instruction like, \u0026ldquo;Think step-by-step before answering.\u0026rdquo; This forces the model to show its reasoning, often resulting in a more accurate final answer. Self-Correction: After the initial output, use follow-up prompts for validation: \u0026ldquo;Review your previous output for technical feasibility. Are there any ambiguous terms that need clarification?\u0026rdquo; Part II: Coding with the API for Production Use For integrating LLM functionality into a product or workflow, the API is the only reliable method. It allows you to programmatically define every aspect of the interaction, including the model, temperature (creativity), and context history.\nBasic Python API Integration The following Python example demonstrates a simple API call. This setup is superior to chat because you define the system role—a fixed instruction that sets the \u0026ldquo;guardrails\u0026rdquo; for the entire interaction.\nimport os from openai import OpenAI # Assuming you are using OpenAI\u0026#39;s API # 1. Configuration (Replace with actual setup) # Ensure OPENAI_API_KEY is set in your environment client = OpenAI( api_key=os.environ.get(\u0026#34;OPENAI_API_KEY\u0026#34;), ) # 2. Define the System Role and User Prompt # The \u0026#39;system\u0026#39; message sets the core instruction/persona SYSTEM_MESSAGE = \u0026#34;You are a highly efficient JSON data validator. You will only respond with a JSON object, never with explanatory text.\u0026#34; USER_PROMPT = \u0026#34;Validate the following list of users: [\u0026#39;Alice\u0026#39;, \u0026#39;Bob\u0026#39;, \u0026#39;Charlie\u0026#39;]\u0026#34; # 3. API Call with Structured Messages try: response = client.chat.completions.create( model=\u0026#34;gpt-4o-mini\u0026#34;, # Use an appropriate model messages=[ {\u0026#34;role\u0026#34;: \u0026#34;system\u0026#34;, \u0026#34;content\u0026#34;: SYSTEM_MESSAGE}, {\u0026#34;role\u0026#34;: \u0026#34;user\u0026#34;, \u0026#34;content\u0026#34;: USER_PROMPT} ], temperature=0.0, # Low temperature for factual, consistent output ) # 4. Process the Response assistant_response = response.choices[0].message.content print(\u0026#34;API Output:\u0026#34;) print(assistant_response) except Exception as e: print(f\u0026#34;An error occurred: {e}\u0026#34;) # Example of the API output (formatted as JSON): # { \u0026#34;status\u0026#34;: \u0026#34;validated\u0026#34;, \u0026#34;users\u0026#34;: [\u0026#34;Alice\u0026#34;, \u0026#34;Bob\u0026#34;, \u0026#34;Charlie\u0026#34;] } Key API Parameters Parameter Purpose Chat Interface Equivalent model Specifies the exact model (e.g., gpt-4o, gpt-3.5-turbo). Cannot be changed mid-conversation. temperature Controls randomness (creativity). 0.0 is deterministic/factual; 1.0 is highly creative. Setting a \u0026ldquo;creative\u0026rdquo; or \u0026ldquo;factual\u0026rdquo; tone in the prompt. system message The immutable core persona or instruction for the AI. A powerful version of the \u0026ldquo;Role\u0026rdquo; from the R-T-C framework. max_tokens Hard limit on the length of the output response. No direct equivalent; the chat UI has a hidden limit. By transitioning from conversational prompting to the structured environment of an API call, you gain the control and consistency necessary to integrate powerful LLM capabilities into professional software and data processing pipelines. This approach is fundamental to building reliable, large-scale AI solutions.\n","permalink":"http://localhost:1313/posts/promtenginner/","summary":"\u003ch2 id=\"introduction-the-shift-from-conversation-to-code\"\u003eIntroduction: The Shift from Conversation to Code\u003c/h2\u003e\n\u003cp\u003eThe transition from using ChatGPT as a conversational tool to mastering its underlying Large Language Model (LLM) via an API is the next critical step for developers and technical professionals. While the chat interface is ideal for general queries, integrating the LLM \u003cstrong\u003eAPI\u003c/strong\u003e offers granular control, repeatable results, and the ability to build scalable, AI-powered applications.\u003c/p\u003e\n\u003cp\u003eThis guide covers advanced \u003cstrong\u003ePrompt Engineering\u003c/strong\u003e for the chat interface and the fundamentals of API integration for high-fidelity, production-ready results.\u003c/p\u003e","title":"Mastering the LLM Interface"},{"content":"Introduction to Go Go, or Golang, is an open-source programming language created by Google. It was designed to be simple, efficient, and reliable, focusing on easy-to-read code and excellent built-in support for concurrency. Its clean syntax makes it a favorite for modern web services, cloud infrastructure, and command-line tools.\nThis guide covers the core concepts you need to start writing Go programs.\n1. Structure: Packages and the main Function Every Go program is organized into packages. A program starts running in the main package and specifically in the main function.\npackage main // The entry point for an executable program import \u0026#34;fmt\u0026#34; // Import the package for formatted I/O (like printing to console) func main() { // This is where execution begins fmt.Println(\u0026#34;Hello, Gopher!\u0026#34;) } Key Concept: Packages main: Used for standalone executable programs. Other names (e.g., net/http): Used for reusable libraries. 2. Variables and Types Go is a statically typed language, meaning variable types are checked at compile time.\nDeclaring Variables Go offers two common ways to declare variables:\nStandard Declaration (Verbose): var username string = \u0026#34;Alice\u0026#34; var age int = 30 Short Declaration (Idiomatic): The := operator declares and initializes a variable, letting the Go compiler infer the type. This is the most common way to declare variables inside a function. message := \u0026#34;Welcome to Go\u0026#34; // type is inferred as string isLearning := true // type is inferred as bool Basic Data Types Type Description Example string Text, UTF-8 encoded. \u0026quot;Go is fast\u0026quot; int Integer, size depends on the OS. 42 float64 Standard floating point number. 3.14159 bool Boolean (True or False). false 3. Control Flow: if and for Go keeps things simple by only having one looping construct: for. The parentheses around conditions are optional and generally omitted.\nConditional Statements (if) score := 95 if score \u0026gt; 90 { fmt.Println(\u0026#34;Grade A\u0026#34;) } else if score \u0026gt; 70 { fmt.Println(\u0026#34;Grade B\u0026#34;) } else { fmt.Println(\u0026#34;Needs improvement\u0026#34;) } Looping (for) The for loop is highly versatile.\n// 1. Classic C-style loop for i := 0; i \u0026lt; 5; i++ { fmt.Println(\u0026#34;Iteration:\u0026#34;, i) } // 2. While-style loop j := 0 for j \u0026lt; 5 { j++ } // 3. Range-based (for iterating over arrays, slices, maps) primes := []int{2, 3, 5, 7} for index, value := range primes { fmt.Printf(\u0026#34;Prime at %d is %d\\n\u0026#34;, index, value) } 4. Functions and Multiple Return Values Functions are declared with the func keyword. A key feature of Go is the ability for functions to return multiple values, which is often used for returning a result and an error.\nfunc add(x int, y int) int { return x + y } func calculate(width int, height int) (area int, perimeter int) { area = width * height perimeter = 2 * (width + height) return // Returns the named return variables (area, perimeter) } func main() { sum := add(10, 5) fmt.Println(\u0026#34;Sum:\u0026#34;, sum) // Output: Sum: 15 a, p := calculate(4, 5) fmt.Println(\u0026#34;Area:\u0026#34;, a, \u0026#34;Perimeter:\u0026#34;, p) // Output: Area: 20 Perimeter: 18 } 5. Concurrency: Goroutines Concurrency is built into Go\u0026rsquo;s DNA. A goroutine is a lightweight, independent function that runs concurrently with others.\nTo start a new goroutine, simply add the go keyword before a function call:\nfunc worker(id int) { fmt.Println(\u0026#34;Worker\u0026#34;, id, \u0026#34;starting...\u0026#34;) time.Sleep(time.Second) // Simulate work fmt.Println(\u0026#34;Worker\u0026#34;, id, \u0026#34;finished.\u0026#34;) } func main() { for i := 1; i \u0026lt;= 3; i++ { go worker(i) // Starts a new, concurrent goroutine } // Wait for goroutines to finish (simplified, usually done with sync.WaitGroup) time.Sleep(2 * time.Second) } This basic overview should give you a solid foundation to start experimenting with Go. Its power lies in its simplicity and robust handling of concurrent operations, making it an excellent language to learn today.\n","permalink":"http://localhost:1313/posts/gobasic/","summary":"\u003ch2 id=\"introduction-to-go\"\u003eIntroduction to Go\u003c/h2\u003e\n\u003cp\u003eGo, or Golang, is an open-source programming language created by Google. It was designed to be simple, efficient, and reliable, focusing on easy-to-read code and excellent built-in support for \u003cstrong\u003econcurrency\u003c/strong\u003e. Its clean syntax makes it a favorite for modern web services, cloud infrastructure, and command-line tools.\u003c/p\u003e\n\u003cp\u003eThis guide covers the core concepts you need to start writing Go programs.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"1-structure-packages-and-the-main-function\"\u003e1. Structure: Packages and the \u003ccode\u003emain\u003c/code\u003e Function\u003c/h2\u003e\n\u003cp\u003eEvery Go program is organized into \u003cstrong\u003epackages\u003c/strong\u003e. A program starts running in the \u003ccode\u003emain\u003c/code\u003e package and specifically in the \u003ccode\u003emain\u003c/code\u003e function.\u003c/p\u003e","title":"The Basics of Go"},{"content":" 🐍 Python Basics for Beginners – Expanded Guide 1. Hello Python Python is a programming language that is easy to read and beginner-friendly. Let’s start:\nprint(\u0026#34;Hello, World!\u0026#34;) 👉 Prints text on the screen.\n2. Variables \u0026amp; Data Types Variables are like boxes that store data.\nname = \u0026#34;cat\u0026#34; # string (text) age = 18 # integer (whole number) height = 5.9 # float (decimal) is_student = True # boolean (True/False) Check data type:\nprint(type(name)) # \u0026lt;class \u0026#39;str\u0026#39;\u0026gt; 3. Comments # This is a comment # Python ignores this line 4. Input (User Interaction) username = input(\u0026#34;Enter your name: \u0026#34;) print(\u0026#34;Hello,\u0026#34;, username) 5. Operators x, y = 10, 3 print(x + y) # 13 print(x - y) # 7 print(x * y) # 30 print(x / y) # 3.33 print(x // y) # 3 (floor division) print(x % y) # 1 (remainder) print(x ** y) # 1000 (power) 6. Conditions (if/elif/else) marks = 75 if marks \u0026gt;= 80: print(\u0026#34;A Grade\u0026#34;) elif marks \u0026gt;= 50: print(\u0026#34;Pass\u0026#34;) else: print(\u0026#34;Fail\u0026#34;) 7. Loops For loop (repeat fixed times):\nfor i in range(5): print(\u0026#34;Hi\u0026#34;, i) While loop (repeat until condition is false):\ncount = 0 while count \u0026lt; 3: print(\u0026#34;Hello\u0026#34;) count += 1 8. Functions Functions are reusable code blocks.\ndef greet(name): return \u0026#34;Hello, \u0026#34; + name print(greet(\u0026#34;Dihan\u0026#34;)) 9. Lists fruits = [\u0026#34;apple\u0026#34;, \u0026#34;banana\u0026#34;, \u0026#34;cherry\u0026#34;] print(fruits[0]) # apple fruits.append(\u0026#34;mango\u0026#34;) # add print(fruits) 10. Tuples (unchangeable list) numbers = (1, 2, 3) print(numbers[1]) # 2 11. Dictionaries (key-value pairs) student = {\u0026#34;name\u0026#34;: \u0026#34;Dihan\u0026#34;, \u0026#34;age\u0026#34;: 18} print(student[\u0026#34;name\u0026#34;]) # Dihan student[\u0026#34;age\u0026#34;] = 19 print(student) 12. Sets (unique items, no duplicates) nums = {1, 2, 3, 3} print(nums) # {1, 2, 3} 13. Strings text = \u0026#34;Python\u0026#34; print(text.upper()) # PYTHON print(text.lower()) # python print(text[0:3]) # Pyt 14. Importing Modules import math print(math.sqrt(16)) # 4.0 15. Error Handling try: num = int(\u0026#34;abc\u0026#34;) # error except ValueError: print(\u0026#34;Invalid number\u0026#34;) 16. File Handling # Write to file with open(\u0026#34;test.txt\u0026#34;, \u0026#34;w\u0026#34;) as f: f.write(\u0026#34;Hello Python\u0026#34;) # Read from file with open(\u0026#34;test.txt\u0026#34;, \u0026#34;r\u0026#34;) as f: print(f.read()) Practice Ideas Calculator Guess the Number game To-do list app Simple quiz ⚡ With these basics, you can already write small programs and move on to beginner projects.\n","permalink":"http://localhost:1313/posts/python-in-5-min/","summary":"\u003chr\u003e\n\u003ch1 id=\"-python-basics-for-beginners--expanded-guide\"\u003e🐍 Python Basics for Beginners – Expanded Guide\u003c/h1\u003e\n\u003chr\u003e\n\u003ch2 id=\"1-hello-python\"\u003e1. Hello Python\u003c/h2\u003e\n\u003cp\u003ePython is a programming language that is \u003cstrong\u003eeasy to read\u003c/strong\u003e and \u003cstrong\u003ebeginner-friendly\u003c/strong\u003e.\nLet’s start:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;Hello, World!\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e👉 Prints text on the screen.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"2-variables--data-types\"\u003e2. Variables \u0026amp; Data Types\u003c/h2\u003e\n\u003cp\u003eVariables are like \u003cstrong\u003eboxes\u003c/strong\u003e that store data.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003ename\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;cat\u0026#34;\u003c/span\u003e     \u003cspan class=\"c1\"\u003e# string (text)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eage\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e18\u003c/span\u003e           \u003cspan class=\"c1\"\u003e# integer (whole number)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eheight\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mf\"\u003e5.9\u003c/span\u003e       \u003cspan class=\"c1\"\u003e# float (decimal)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eis_student\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003eTrue\u003c/span\u003e  \u003cspan class=\"c1\"\u003e# boolean (True/False)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eCheck data type:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003etype\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e   \u003cspan class=\"c1\"\u003e# \u0026lt;class \u0026#39;str\u0026#39;\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003chr\u003e\n\u003ch2 id=\"3-comments\"\u003e3. Comments\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# This is a comment\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Python ignores this line\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003chr\u003e\n\u003ch2 id=\"4-input-user-interaction\"\u003e4. Input (User Interaction)\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eusername\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003einput\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;Enter your name: \u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;Hello,\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eusername\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003chr\u003e\n\u003ch2 id=\"5-operators\"\u003e5. Operators\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ey\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003ey\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e  \u003cspan class=\"c1\"\u003e# 13\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"n\"\u003ey\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e  \u003cspan class=\"c1\"\u003e# 7\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003ey\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e  \u003cspan class=\"c1\"\u003e# 30\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"o\"\u003e/\u003c/span\u003e \u003cspan class=\"n\"\u003ey\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e  \u003cspan class=\"c1\"\u003e# 3.33\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"o\"\u003e//\u003c/span\u003e \u003cspan class=\"n\"\u003ey\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"c1\"\u003e# 3 (floor division)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"o\"\u003e%\u003c/span\u003e \u003cspan class=\"n\"\u003ey\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e  \u003cspan class=\"c1\"\u003e# 1 (remainder)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"o\"\u003e**\u003c/span\u003e \u003cspan class=\"n\"\u003ey\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"c1\"\u003e# 1000 (power)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003chr\u003e\n\u003ch2 id=\"6-conditions-ifelifelse\"\u003e6. Conditions (if/elif/else)\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003emarks\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e75\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003emarks\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;=\u003c/span\u003e \u003cspan class=\"mi\"\u003e80\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nb\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;A Grade\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eelif\u003c/span\u003e \u003cspan class=\"n\"\u003emarks\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;=\u003c/span\u003e \u003cspan class=\"mi\"\u003e50\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nb\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;Pass\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eelse\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nb\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;Fail\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003chr\u003e\n\u003ch2 id=\"7-loops\"\u003e7. Loops\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003eFor loop\u003c/strong\u003e (repeat fixed times):\u003c/p\u003e","title":"Basic Python In 5 Min."},{"content":"💻 Windows Terminal – Beginner 1. What is Windows Terminal? Windows Terminal is Microsoft’s modern terminal app for Windows. It can run multiple shells in one place, such as:\nCommand Prompt (cmd) PowerShell WSL (Linux on Windows) Azure Cloud Shell 👉 Think of it as a hub for all your command-line tools.\n2. Installing Windows Terminal Open Microsoft Store on Windows 10/11 Search for Windows Terminal Click Install (or Windows Terminal Preview if you want new features earlier) 3. Opening Windows Terminal Press Win + X → Windows Terminal Or just search Terminal in the Start Menu 4. Tabs \u0026amp; Panes 🗂️ Tabs let you open multiple shells Panes split the window into sections 👉 Shortcuts:\nNew tab → Ctrl + Shift + T Split pane → Alt + Shift + D Switch tabs → Ctrl + Tab 5. Customizing Windows Terminal 🎨 Change Theme \u0026amp; Appearance Open settings → Ctrl + ,\nGo to Appearance\nYou can change:\nBackground color Font style/size Transparency Example JSON settings (advanced users): \u0026#34;profiles\u0026#34;: { \u0026#34;defaults\u0026#34;: { \u0026#34;colorScheme\u0026#34;: \u0026#34;One Half Dark\u0026#34;, \u0026#34;fontFace\u0026#34;: \u0026#34;Cascadia Code\u0026#34;, \u0026#34;fontSize\u0026#34;: 12 } } 6. Useful Features 🚀 Command history → press ↑ / ↓ Search inside terminal → Ctrl + Shift + F Copy/Paste → Ctrl + C / Ctrl + V Zoom → Ctrl + + / Ctrl + - Quake mode (drop-down terminal like in games) → `Win + `` (backtick) 7. Next Steps (Practice) Open a PowerShell tab → type Get-Help Open a Command Prompt tab → type dir If you have WSL installed → run ls (Linux style) ✅ That’s the basics of Windows Terminal! You now know how to:\nInstall it Open and switch shells Customize appearance Use tabs, panes, and shortcuts ","permalink":"http://localhost:1313/posts/termi/","summary":"\u003ch1 id=\"-windows-terminal--beginner\"\u003e💻 Windows Terminal – Beginner\u003c/h1\u003e\n\u003chr\u003e\n\u003ch2 id=\"1-what-is-windows-terminal\"\u003e1. What is Windows Terminal?\u003c/h2\u003e\n\u003cp\u003eWindows Terminal is Microsoft’s modern terminal app for Windows.\nIt can run multiple shells in one place, such as:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eCommand Prompt (cmd)\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003ePowerShell\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eWSL (Linux on Windows)\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eAzure Cloud Shell\u003c/strong\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e👉 Think of it as a \u003cstrong\u003ehub for all your command-line tools\u003c/strong\u003e.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"2-installing-windows-terminal\"\u003e2. Installing Windows Terminal\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003eOpen \u003cstrong\u003eMicrosoft Store\u003c/strong\u003e on Windows 10/11\u003c/li\u003e\n\u003cli\u003eSearch for \u003cstrong\u003eWindows Terminal\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003eClick \u003cstrong\u003eInstall\u003c/strong\u003e (or \u003cstrong\u003eWindows Terminal Preview\u003c/strong\u003e if you want new features earlier)\u003c/li\u003e\n\u003c/ol\u003e\n\u003chr\u003e\n\u003ch2 id=\"3-opening-windows-terminal\"\u003e3. Opening Windows Terminal\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003ePress \u003cstrong\u003eWin + X → Windows Terminal\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003eOr just search \u003cstrong\u003eTerminal\u003c/strong\u003e in the Start Menu\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"4-tabs--panes-\"\u003e4. Tabs \u0026amp; Panes 🗂️\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eTabs\u003c/strong\u003e let you open multiple shells\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003ePanes\u003c/strong\u003e split the window into sections\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e👉 Shortcuts:\u003c/p\u003e","title":"Windows Terminal Guide."},{"content":"🛠️ Install \u0026amp; Use a GitHub Config for Hyperland 1. Install Hyperland \u0026amp; Dependencies First, make sure you already have Hyperland installed:\nyay -S hyprland waybar rofi alacritty thunar network-manager-applet pipewire pavucontrol 2. Find a GitHub Config Many Linux users share their Hyperland configs. A few good ones:\nhttps://github.com/hyprland-community/awesome-hyprland → collection of configs Example user config: https://github.com/prasanthrangan/hyprdots (popular Hyprland rice pack) 3. Backup Your Current Config Before replacing anything, backup your defaults:\nmv ~/.config/hypr ~/.config/hypr_backup mv ~/.config/waybar ~/.config/waybar_backup mv ~/.config/rofi ~/.config/rofi_backup 4. Clone the GitHub Config Example with hyprdots:\ngit clone https://github.com/prasanthrangan/hyprdots.git cd hyprdots Many repos come with an installer script, e.g.:\n./install.sh If not, just copy configs manually:\ncp -r hypr ~/.config/ cp -r waybar ~/.config/ cp -r rofi ~/.config/ 5. Autostart Apps Most configs already set Waybar, Rofi, Wallpaper, etc. If not, check:\n~/.config/hypr/hyprland.conf Look for lines like:\nexec-once = waybar \u0026amp; exec-once = nm-applet \u0026amp; exec-once = swww init \u0026amp;\u0026amp; swww img ~/Pictures/wallpapers/wall.jpg 6. Restart Hyperland Logout and re-login to Hyperland, or Run: hyprctl reload 7. Customize Once installed, you can:\nEdit Waybar at ~/.config/waybar/config Edit Rofi theme at ~/.config/rofi/config.rasi Change wallpapers in the config ✅ Now you have a ready-made Hyperland desktop with animations, bar, launcher, and a polished look straight from GitHub.\n","permalink":"http://localhost:1313/posts/hyprland/","summary":"\u003ch1 id=\"-install--use-a-github-config-for-hyperland\"\u003e🛠️ Install \u0026amp; Use a GitHub Config for Hyperland\u003c/h1\u003e\n\u003chr\u003e\n\u003ch2 id=\"1-install-hyperland--dependencies\"\u003e1. Install Hyperland \u0026amp; Dependencies\u003c/h2\u003e\n\u003cp\u003eFirst, make sure you already have Hyperland installed:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eyay -S hyprland waybar rofi alacritty thunar network-manager-applet pipewire pavucontrol\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003chr\u003e\n\u003ch2 id=\"2-find-a-github-config\"\u003e2. Find a GitHub Config\u003c/h2\u003e\n\u003cp\u003eMany Linux users share their Hyperland configs. A few good ones:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/hyprland-community/awesome-hyprland\"\u003ehttps://github.com/hyprland-community/awesome-hyprland\u003c/a\u003e → collection of configs\u003c/li\u003e\n\u003cli\u003eExample user config: \u003ca href=\"https://github.com/prasanthrangan/hyprdots\"\u003ehttps://github.com/prasanthrangan/hyprdots\u003c/a\u003e (popular Hyprland rice pack)\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"3-backup-your-current-config\"\u003e3. Backup Your Current Config\u003c/h2\u003e\n\u003cp\u003eBefore replacing anything, backup your defaults:\u003c/p\u003e","title":"Firstly Hyprland."},{"content":"How to Install Ollama on Your System Ollama is a lightweight framework that lets you run large language models (LLMs) locally on your computer. It supports models like Llama 2, Mistral, Gemma, and more — all without needing a cloud API.\nThis guide will walk you through installing Ollama on macOS, Linux, and Windows.\n🔧 Prerequisites A modern computer with at least 8GB RAM (16GB recommended). Operating system: macOS 11+, Linux (Ubuntu/Debian), or Windows 10/11 (with WSL2). An internet connection (to download Ollama and models). 🖥️ macOS Installation Open Terminal.\nInstall Ollama with Homebrew (recommended):\nbrew install ollama/tap/ollama s. Start the Ollama service:\nollama serve Run your first model (example with Llama 2):\nollama run llama2 👉 Ollama will automatically download the model on first run.\n🐧 Linux Installation (Recommened) Currently, Ollama provides official builds for Debian/Ubuntu.\nDownload and install the .deb package:\ncurl -fsSL https://ollama.ai/install.sh | sh Start the Ollama service:\nollama serve s. Run a model:\nollama run mistral 🪟 Windows Installation Ollama doesn’t yet have a native Windows build, but you can run it through WSL2 (Windows Subsystem for Linux):\nInstall WSL2 with Ubuntu.\nOpen the Ubuntu terminal in Windows.\nRun the Linux installation steps:\ncurl -fsSL https://ollama.ai/install.sh | sh Once installed, start Ollama inside WSL:\nollama serve Run a model:\nollama run llama2 ✅ Verifying the Installation After installing, check if Ollama is working by running:\nollama list This will show all available models on your system.\n🎯 Next Steps Explore different models:\nollama run mistral ollama run gemma Create your own model configuration with Modelfile.\nIntegrate Ollama into apps using its REST API.\n🚀 Conclusion With Ollama installed, you now have the power to run advanced AI models locally, without depending on cloud providers. Whether you’re a developer, researcher, or just experimenting, Ollama makes local AI accessible and easy.\n👉 Visit the Ollama docs for more details. ```\n","permalink":"http://localhost:1313/posts/ollama-pt1/","summary":"\u003ch1 id=\"how-to-install-ollama-on-your-system\"\u003eHow to Install Ollama on Your System\u003c/h1\u003e\n\u003cp\u003e\u003ca href=\"https://ollama.ai\"\u003eOllama\u003c/a\u003e is a lightweight framework that lets you run large language models (LLMs) locally on your computer. It supports models like \u003cstrong\u003eLlama 2\u003c/strong\u003e, \u003cstrong\u003eMistral\u003c/strong\u003e, \u003cstrong\u003eGemma\u003c/strong\u003e, and more — all without needing a cloud API.\u003c/p\u003e\n\u003cp\u003eThis guide will walk you through installing Ollama on \u003cstrong\u003emacOS\u003c/strong\u003e, \u003cstrong\u003eLinux\u003c/strong\u003e, and \u003cstrong\u003eWindows\u003c/strong\u003e.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"-prerequisites\"\u003e🔧 Prerequisites\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eA modern computer with \u003cstrong\u003eat least 8GB RAM\u003c/strong\u003e (16GB recommended).\u003c/li\u003e\n\u003cli\u003eOperating system: \u003cstrong\u003emacOS 11+\u003c/strong\u003e, \u003cstrong\u003eLinux (Ubuntu/Debian)\u003c/strong\u003e, or \u003cstrong\u003eWindows 10/11 (with WSL2)\u003c/strong\u003e.\u003c/li\u003e\n\u003cli\u003eAn internet connection (to download Ollama and models).\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"-macos-installation\"\u003e🖥️ macOS Installation\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003eOpen \u003cstrong\u003eTerminal\u003c/strong\u003e.\u003c/p\u003e","title":"Ollama Guide For Nerds."}]